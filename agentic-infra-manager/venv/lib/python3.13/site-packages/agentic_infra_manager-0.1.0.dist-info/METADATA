Metadata-Version: 2.4
Name: agentic-infra-manager
Version: 0.1.0
Summary: Intelligent agent for autonomous AWS infrastructure planning, provisioning, and management
Author-email: Infrastructure AI Agent <agent@inframanager.ai>
License: MIT
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Requires-Python: >=3.11
Description-Content-Type: text/markdown
Requires-Dist: langgraph>=0.0.40
Requires-Dist: langchain>=0.1.0
Requires-Dist: boto3>=1.34.0
Requires-Dist: kubernetes>=28.1.0
Requires-Dist: diagrams>=0.23.4
Requires-Dist: fastapi>=0.104.0
Requires-Dist: click>=8.1.0
Requires-Dist: rich>=13.6.0
Provides-Extra: dev
Requires-Dist: pytest>=7.4.0; extra == "dev"
Requires-Dist: pytest-asyncio>=0.21.0; extra == "dev"
Requires-Dist: pytest-cov>=4.1.0; extra == "dev"
Requires-Dist: black>=23.9.0; extra == "dev"
Requires-Dist: flake8>=6.1.0; extra == "dev"
Requires-Dist: mypy>=1.6.0; extra == "dev"

# Agentic AI Infrastructure Management System

An intelligent agent that autonomously plans, provisions, and manages AWS infrastructure with specialized focus on Kubernetes cluster deployment and application lifecycle management.

## 🚀 Overview

This system operates as an intelligent infrastructure companion that:
- Analyzes application requirements from Git repositories
- Plans optimal AWS infrastructure using Well-Architected Framework principles
- Generates Infrastructure as Code (Terraform/CDK)
- Provisions and manages Kubernetes clusters
- Deploys applications with proper monitoring and security
- Continuously optimizes performance and costs

## 🔧 Core Capabilities

### Infrastructure Planning & Architecture
- ✅ AWS Well-Architected Framework compliance
- ✅ High availability multi-AZ deployments
- ✅ EKS cluster management with security configurations
- ✅ VPC design with proper network segmentation

### LangGraph Integration
- ✅ Topology visualization and planning workflows
- ✅ Decision-making process modeling
- ✅ Impact analysis for infrastructure changes
- ✅ Automated compliance checking

### Security & IAM Management
- ✅ Root credential usage only for initial setup
- ✅ Role-based access control with least-privilege
- ✅ Automated security scanning and compliance
- ✅ Secrets management integration

### Application Deployment Intelligence
- ✅ Git repository analysis and dependency mapping
- ✅ Infrastructure requirements assessment
- ✅ Deployment strategy planning (blue/green, canary, rolling)
- ✅ Auto-scaling and resource optimization

## 🏗️ Architecture

```
┌─────────────────────────────────────────────────────────────┐
│                   Agentic AI Infrastructure Manager         │
├─────────────────────────────────────────────────────────────┤
│  Core Agent (LangGraph)                                     │
│  ├── Repository Analyzer                                    │
│  ├── Infrastructure Planner                                 │
│  ├── Security Manager                                       │
│  ├── Deployment Orchestrator                                │
│  └── Optimization Engine                                    │
├─────────────────────────────────────────────────────────────┤
│  Infrastructure Layer                                       │
│  ├── AWS SDK Integration                                    │
│  ├── Terraform/CDK Generator                                │
│  ├── Kubernetes Manager                                     │
│  └── Monitoring & Observability                             │
├─────────────────────────────────────────────────────────────┤
│  Security Layer                                             │
│  ├── IAM Role Management                                    │
│  ├── Policy Generation                                      │
│  ├── Compliance Scanning                                    │
│  └── Secrets Management                                     │
└─────────────────────────────────────────────────────────────┘
```

## 📋 Prerequisites

Before you begin, ensure you have:
- **MacBook** with macOS 10.15+ (Catalina or later)
- **Terminal** access (built-in Terminal app)
- **Internet connection** for downloading dependencies
- **AWS Account** with administrative access
- **OpenAI API Key** (for AI-powered planning)

## 🛠️ Complete Setup Guide for New Users

### Step 1: Install System Dependencies

#### Install Homebrew (Package Manager)
```bash
# Install Homebrew if not already installed
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

# Add Homebrew to your PATH
echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> ~/.zshrc
source ~/.zshrc
```

#### Install Python 3.11+
```bash
# Install Python using Homebrew
brew install python@3.11

# Verify installation
python3 --version
# Should show Python 3.11.x or higher
```

#### Install Git (if not already installed)
```bash
# Install Git
brew install git

# Verify installation
git --version
```

#### Install AWS CLI
```bash
# Install AWS CLI
brew install awscli

# Verify installation
aws --version
```

### Step 2: AWS Account Setup

#### Create AWS Account
1. Go to [AWS Console](https://aws.amazon.com/)
2. Click "Create an AWS Account"
3. Follow the registration process
4. **Important**: You'll need a credit card for verification

#### Create IAM User for the Agent
```bash
# Login to AWS Console
# Navigate to IAM > Users > Create User
# User name: agentic-infra-manager
# Attach policies: AdministratorAccess (for initial setup)
# Create access keys and download CSV file
```

#### Configure AWS CLI
```bash
# Configure AWS credentials
aws configure

# When prompted, enter:
# AWS Access Key ID: [Your access key from CSV]
# AWS Secret Access Key: [Your secret key from CSV]
# Default region name: us-west-2
# Default output format: json

# Test your configuration
aws sts get-caller-identity
```

### Step 3: Get OpenAI API Key

#### Sign up for OpenAI
1. Go to [OpenAI Platform](https://platform.openai.com/)
2. Sign up for an account
3. Navigate to API Keys section
4. Create new API key
5. **Important**: Save this key securely - you won't see it again

### Step 4: Download and Install the Agent

#### Clone the Repository
```bash
# Navigate to your desired directory
cd ~/Documents

# Clone the repository
git clone https://github.com/your-org/agentic-infra-manager.git
cd agentic-infra-manager
```

#### Create Python Virtual Environment
```bash
# Create virtual environment
python3 -m venv venv

# Activate virtual environment
source venv/bin/activate

# You should see (venv) in your terminal prompt
```

#### Install the Agent
```bash
# Install dependencies and the agent
make install

# Verify installation
infra-agent --help
```

### Step 5: Configure Environment Variables

#### Create Environment File
```bash
# Create .env file with your credentials
cat > .env << 'EOF'
# AWS Configuration
AWS_REGION=us-west-2
AWS_PROFILE=default

# OpenAI API Key (REQUIRED)
OPENAI_API_KEY=your_openai_api_key_here

# GitHub Token (Optional - for private repositories)
# GITHUB_TOKEN=your_github_token_here

# Agent Configuration
AGENT_LOG_LEVEL=INFO
AGENT_WORKSPACE=/tmp/agent-workspace

# Optional: LangSmith for debugging
# LANGCHAIN_TRACING_V2=true
# LANGCHAIN_API_KEY=your_langsmith_api_key_here
# LANGCHAIN_PROJECT=agentic-infra-manager
EOF
```

#### Update Environment Variables
```bash
# Edit the .env file with your actual keys
nano .env

# Replace 'your_openai_api_key_here' with your actual OpenAI API key
# Save and exit (Ctrl+X, then Y, then Enter)

# Load environment variables
source .env
```

### Step 6: Initialize the Agent

#### Interactive Setup
```bash
# Initialize with interactive configuration
infra-agent init --interactive

# Follow the prompts:
# - Agent name: Infrastructure AI Agent
# - Workspace directory: /tmp/agent-workspace
# - AWS region: us-west-2
# - OpenAI API key: [will be loaded from environment]
```

#### Verify Setup
```bash
# Check configuration
infra-agent config

# Check version
infra-agent version
```

## 🚀 Usage Examples

### Basic Workflow

#### 1. Analyze a Repository
```bash
# Activate virtual environment (if not already active)
source venv/bin/activate

# Load environment variables
source .env

# Analyze a public repository
infra-agent analyze https://github.com/spring-projects/spring-petclinic

# Analyze for production environment
infra-agent analyze https://github.com/spring-projects/spring-petclinic --target-env prod

# Save analysis results
infra-agent analyze https://github.com/spring-projects/spring-petclinic --output analysis.json
```

#### 2. Deploy Infrastructure
```bash
# Deploy based on generated plan (replace with actual plan-id from analysis)
infra-agent deploy --plan-id plan-20240101-123456

# Auto-approve deployment (skip confirmation)
infra-agent deploy --plan-id plan-20240101-123456 --approve

# Deploy with custom timeout
infra-agent deploy --plan-id plan-20240101-123456 --timeout 45
```

#### 3. Monitor Your Infrastructure
```bash
# Monitor a specific cluster
infra-agent monitor --cluster my-spring-app-cluster

# Continuous monitoring (Ctrl+C to stop)
infra-agent monitor --cluster my-spring-app-cluster --watch

# Monitor with custom interval
infra-agent monitor --cluster my-spring-app-cluster --watch --interval 60
```

#### 4. Optimize Infrastructure
```bash
# Get optimization recommendations
infra-agent optimize --cluster my-spring-app-cluster --recommendations-only

# Apply optimizations
infra-agent optimize --cluster my-spring-app-cluster
```

### Advanced Usage

#### Using Different Environments
```bash
# Development environment
infra-agent analyze https://github.com/your-org/your-app --target-env dev

# Staging environment
infra-agent analyze https://github.com/your-org/your-app --target-env staging

# Production environment
infra-agent analyze https://github.com/your-org/your-app --target-env prod
```

#### Custom AWS Region
```bash
# Use different AWS region
infra-agent analyze https://github.com/your-org/your-app --region eu-west-1
```

#### Verbose Logging
```bash
# Enable verbose logging for debugging
infra-agent --verbose analyze https://github.com/your-org/your-app
```

### Complete Example Workflow

```bash
# 1. Prepare your environment
cd ~/Documents/agentic-infra-manager
source venv/bin/activate
source .env

# 2. Analyze a sample application
infra-agent analyze https://github.com/spring-projects/spring-petclinic --target-env dev --output petclinic-analysis.json

# 3. Review the analysis results
cat petclinic-analysis.json | jq '.'

# 4. Deploy the infrastructure (use plan-id from analysis output)
infra-agent deploy --plan-id plan-20240101-123456

# 5. Monitor the deployment
infra-agent monitor --cluster petclinic-dev-cluster --watch
```

## 📁 Generated Files and Artifacts

The system generates several important files:

### Configuration Files
- `config/agent.yaml` - Agent configuration
- `.env` - Environment variables

### Analysis Results
- `analysis.json` - Repository analysis results
- `config/plans/` - Infrastructure plans directory

### Generated Code
- `generated/terraform/` - Terraform infrastructure code
- `generated/kubernetes/` - Kubernetes manifests
- `generated/helm/` - Helm charts

### Documentation
- `generated/diagrams/` - Architecture diagrams (PNG/SVG)
- `generated/docs/` - Auto-generated documentation
- `generated/reports/` - Cost analysis and security reports

### Logs
- `/tmp/agent-workspace/logs/` - Agent logs
- `/tmp/agent-workspace/plans/` - Deployment plans
- `/tmp/agent-workspace/state/` - Agent state files

## 🔧 Troubleshooting

### Common Issues

#### AWS Credentials Not Found
```bash
# Check if AWS is configured
aws sts get-caller-identity

# If error, reconfigure AWS
aws configure
```

#### OpenAI API Key Issues
```bash
# Check if environment variable is set
echo $OPENAI_API_KEY

# If empty, update .env file and reload
source .env
```

#### Permission Denied Errors
```bash
# Check AWS permissions
aws iam get-user

# Check if user has required policies attached
aws iam list-attached-user-policies --user-name agentic-infra-manager
```

#### Python/Pip Issues
```bash
# Ensure virtual environment is activated
source venv/bin/activate

# Reinstall if needed
make clean
make install
```

### Debugging Commands

```bash
# Run with verbose logging
infra-agent --verbose analyze https://github.com/your-repo

# Check agent logs
tail -f /tmp/agent-workspace/logs/agent.log

# Validate configuration
infra-agent config

# Test AWS connectivity
aws ec2 describe-regions --region us-west-2
```

### Getting Help

```bash
# General help
infra-agent --help

# Command-specific help
infra-agent analyze --help
infra-agent deploy --help
infra-agent monitor --help
infra-agent optimize --help
```

## 💡 Tips for Success

### Before You Start
1. **Test AWS Access**: Run `aws sts get-caller-identity` to verify credentials
2. **Check OpenAI Credits**: Ensure you have sufficient OpenAI API credits
3. **Understand Costs**: Review AWS pricing for services you'll use
4. **Start Small**: Begin with development environment and simple applications

### Best Practices
1. **Use Version Control**: Commit generated Terraform code to Git
2. **Review Plans**: Always review infrastructure plans before deployment
3. **Monitor Costs**: Set up AWS billing alerts
4. **Security First**: Review security configurations before production use
5. **Backup State**: Keep Terraform state files backed up

### Resource Management
```bash
# Clean up resources when done
infra-agent cleanup --cluster your-cluster-name

# Or manually through AWS Console
# Navigate to CloudFormation and delete stacks
```

## 🧪 Testing Your Setup

### Quick Test
```bash
# Test the installation
infra-agent version

# Test AWS connectivity
aws sts get-caller-identity

# Test OpenAI API
echo $OPENAI_API_KEY | wc -c
# Should show a number > 40
```

### Full Test
```bash
# Run example from the examples directory
python examples/basic_usage.py

# Or test with a real repository
infra-agent analyze https://github.com/spring-projects/spring-petclinic --dry-run
```

## 📊 LangGraph Workflow

The agent uses LangGraph to model complex decision-making processes:

```python
workflow = StateGraph(AgentState)
workflow.add_node("analyze_repo", analyze_repository_node)
workflow.add_node("assess_requirements", assess_infrastructure_requirements)
workflow.add_node("plan_security", plan_security_configuration)
workflow.add_node("generate_topology", generate_infrastructure_topology)
workflow.add_node("optimize_resources", optimize_resource_allocation)
workflow.add_node("deploy_infrastructure", deploy_infrastructure_node)

# Add conditional edges for decision making
workflow.add_conditional_edges(
    "analyze_repo",
    route_based_on_app_type,
    {
        "web_app": "assess_requirements",
        "microservice": "assess_requirements",
        "data_pipeline": "assess_requirements"
    }
)
```

## 🔒 Security Model

### Phase 1: Initial Setup (Root Credentials)
- Create foundational IAM roles and policies
- Establish cross-account access patterns
- Set up logging and monitoring foundations

### Phase 2: Operations (Assumed Roles)
- All infrastructure operations use assumed roles
- Least-privilege access patterns
- Automated security scanning

### Phase 3: Continuous Compliance
- Regular security assessments
- Policy drift detection
- Automated remediation

## 📈 Monitoring & Optimization

The agent continuously monitors:
- Resource utilization and costs
- Security compliance status
- Application performance metrics
- Infrastructure drift detection

## 🤝 Contributing

1. Fork the repository
2. Create a feature branch
3. Add tests for new functionality
4. Ensure all tests pass
5. Submit a pull request

## 📄 License

MIT License - see [LICENSE](LICENSE) file for details. 
