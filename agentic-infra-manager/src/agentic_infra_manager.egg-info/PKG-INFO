Metadata-Version: 2.4
Name: agentic-infra-manager
Version: 0.1.0
Summary: Intelligent agent for autonomous AWS infrastructure planning, provisioning, and management
Author-email: Infrastructure AI Agent <agent@inframanager.ai>
License: MIT
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Requires-Python: >=3.11
Description-Content-Type: text/markdown
Requires-Dist: langgraph>=0.0.40
Requires-Dist: langchain>=0.1.0
Requires-Dist: boto3>=1.34.0
Requires-Dist: kubernetes>=28.1.0
Requires-Dist: diagrams>=0.23.4
Requires-Dist: fastapi>=0.104.0
Requires-Dist: click>=8.1.0
Requires-Dist: rich>=13.6.0
Provides-Extra: dev
Requires-Dist: pytest>=7.4.0; extra == "dev"
Requires-Dist: pytest-asyncio>=0.21.0; extra == "dev"
Requires-Dist: pytest-cov>=4.1.0; extra == "dev"
Requires-Dist: black>=23.9.0; extra == "dev"
Requires-Dist: flake8>=6.1.0; extra == "dev"
Requires-Dist: mypy>=1.6.0; extra == "dev"

# Agentic AI Infrastructure Management System

An intelligent agent that autonomously plans, provisions, and manages AWS infrastructure with specialized focus on Kubernetes cluster deployment and application lifecycle management.

## 🚀 Overview

This system operates as an intelligent infrastructure companion that:
- Analyzes application requirements from Git repositories
- Plans optimal AWS infrastructure using Well-Architected Framework principles
- Generates Infrastructure as Code (Terraform/CDK)
- Provisions and manages Kubernetes clusters
- Deploys applications with proper monitoring and security
- Continuously optimizes performance and costs

## 🔧 Core Capabilities

### Infrastructure Planning & Architecture
- ✅ AWS Well-Architected Framework compliance
- ✅ High availability multi-AZ deployments
- ✅ EKS cluster management with security configurations
- ✅ VPC design with proper network segmentation

### LangGraph Integration
- ✅ Topology visualization and planning workflows
- ✅ Decision-making process modeling
- ✅ Impact analysis for infrastructure changes
- ✅ Automated compliance checking

### Security & IAM Management
- ✅ Root credential usage only for initial setup
- ✅ Role-based access control with least-privilege
- ✅ Automated security scanning and compliance
- ✅ Secrets management integration

### Application Deployment Intelligence
- ✅ Git repository analysis and dependency mapping
- ✅ Infrastructure requirements assessment
- ✅ Deployment strategy planning (blue/green, canary, rolling)
- ✅ Auto-scaling and resource optimization

## 🏗️ Architecture

```
┌─────────────────────────────────────────────────────────────┐
│                   Agentic AI Infrastructure Manager         │
├─────────────────────────────────────────────────────────────┤
│  Core Agent (LangGraph)                                     │
│  ├── Repository Analyzer                                    │
│  ├── Infrastructure Planner                                 │
│  ├── Security Manager                                       │
│  ├── Deployment Orchestrator                                │
│  └── Optimization Engine                                    │
├─────────────────────────────────────────────────────────────┤
│  Infrastructure Layer                                       │
│  ├── AWS SDK Integration                                    │
│  ├── Terraform/CDK Generator                                │
│  ├── Kubernetes Manager                                     │
│  └── Monitoring & Observability                             │
├─────────────────────────────────────────────────────────────┤
│  Security Layer                                             │
│  ├── IAM Role Management                                    │
│  ├── Policy Generation                                      │
│  ├── Compliance Scanning                                    │
│  └── Secrets Management                                     │
└─────────────────────────────────────────────────────────────┘
```

## 🛠️ Installation

```bash
# Clone the repository
git clone <repository-url>
cd agentic-infra-manager

# Install dependencies
pip install -r requirements.txt

# Install in development mode
pip install -e .
```

## ⚙️ Configuration

### Environment Variables
```bash
# AWS Configuration
export AWS_REGION=us-west-2
export AWS_PROFILE=your-profile

# OpenAI API (for AI planning)
export OPENAI_API_KEY=your-openai-key

# GitHub Token (for repository analysis)
export GITHUB_TOKEN=your-github-token

# Agent Configuration
export AGENT_LOG_LEVEL=INFO
export AGENT_WORKSPACE=/path/to/workspace
```

### Configuration File
Create `config/agent.yaml`:
```yaml
agent:
  name: "Infrastructure AI Agent"
  workspace: "/tmp/agent-workspace"
  
aws:
  region: "us-west-2"
  profile: "default"
  
security:
  root_credential_usage: "initial_setup_only"
  iam_role_prefix: "agent-"
  
kubernetes:
  cluster_version: "1.28"
  node_instance_types: ["t3.medium", "t3.large"]
  
monitoring:
  enable_cloudwatch: true
  enable_prometheus: true
```

## 🚀 Usage

### Command Line Interface
```bash
# Initialize the agent
infra-agent init --config config/agent.yaml

# Analyze a repository and plan infrastructure
infra-agent analyze https://github.com/user/app-repo

# Deploy infrastructure
infra-agent deploy --plan-id <plan-id>

# Monitor deployed infrastructure
infra-agent monitor --cluster <cluster-name>

# Optimize existing infrastructure
infra-agent optimize --cluster <cluster-name>
```

### Python API
```python
from agentic_infra_manager import InfrastructureAgent

# Initialize the agent
agent = InfrastructureAgent(config_path="config/agent.yaml")

# Analyze repository
analysis = await agent.analyze_repository("https://github.com/user/app")

# Generate infrastructure plan
plan = await agent.plan_infrastructure(analysis)

# Deploy infrastructure
deployment = await agent.deploy_infrastructure(plan)

# Monitor and optimize
await agent.monitor_infrastructure(deployment.cluster_id)
```

## 📊 LangGraph Workflow

The agent uses LangGraph to model complex decision-making processes:

```python
workflow = StateGraph(AgentState)
workflow.add_node("analyze_repo", analyze_repository_node)
workflow.add_node("assess_requirements", assess_infrastructure_requirements)
workflow.add_node("plan_security", plan_security_configuration)
workflow.add_node("generate_topology", generate_infrastructure_topology)
workflow.add_node("optimize_resources", optimize_resource_allocation)
workflow.add_node("deploy_infrastructure", deploy_infrastructure_node)

# Add conditional edges for decision making
workflow.add_conditional_edges(
    "analyze_repo",
    route_based_on_app_type,
    {
        "web_app": "assess_requirements",
        "microservice": "assess_requirements",
        "data_pipeline": "assess_requirements"
    }
)
```

## 🔒 Security Model

### Phase 1: Initial Setup (Root Credentials)
- Create foundational IAM roles and policies
- Establish cross-account access patterns
- Set up logging and monitoring foundations

### Phase 2: Operations (Assumed Roles)
- All infrastructure operations use assumed roles
- Least-privilege access patterns
- Automated security scanning

### Phase 3: Continuous Compliance
- Regular security assessments
- Policy drift detection
- Automated remediation

## 📈 Monitoring & Optimization

The agent continuously monitors:
- Resource utilization and costs
- Security compliance status
- Application performance metrics
- Infrastructure drift detection

## 🧪 Testing

```bash
# Run unit tests
pytest tests/unit/

# Run integration tests
pytest tests/integration/

# Run security tests
pytest tests/security/

# Generate coverage report
pytest --cov=src --cov-report=html
```

## 📝 Documentation

- [Agent Architecture](docs/architecture.md)
- [LangGraph Workflows](docs/workflows.md)
- [Security Model](docs/security.md)
- [API Reference](docs/api.md)
- [Deployment Guide](docs/deployment.md)

## 🤝 Contributing

1. Fork the repository
2. Create a feature branch
3. Add tests for new functionality
4. Ensure all tests pass
5. Submit a pull request

## 📄 License

MIT License - see [LICENSE](LICENSE) file for details.

## 🆘 Support

- GitHub Issues: Report bugs and feature requests
- Documentation: Comprehensive guides and API reference
- Examples: Sample configurations and use cases

---

**Note**: This system is designed for production use but requires careful configuration and testing in your specific environment. 
